package services;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.ItemRepository;
import security.Authority;
import utilities.DPUtils;
import domain.Item;

@Service
@Transactional
public class ItemService {
	// Managed Repository ------------------------------
	@Autowired
	private ItemRepository itemRepository;

	// Supporting Services -----------------------------

	// Constructors ------------------------------------
	public ItemService() {
		super();
	}

	// Simple CRUD Methods -----------------------------
	public Item create() {
		return new Item();
	}
	
	// REQ 12.2
	// Manage the catalogue of items, which includes creating, updating, and deleting them. 
	// Note that items are never actually deleted, but marked as deleted. 
	// Items that are marked as deleted are not displayed in the catalogue of items and, obviously, cannot be ordered.
	public void save(Item item){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN));
		itemRepository.save(item);
	}

	// Other Business Methods ---------------------------
	
	// REQ 10.2
	// List the catalogue of items grouped by their categories.
	public Collection<Item> getItemsGroupedByCategory(int categoryId) {
		return itemRepository.getItemsGroupedByCategory(categoryId);
	}
	
	// REQ 10.3
	// Search for an item using a single keyword that must appear verbatim in its SKU, its name, or its description.
	public Collection<Item> searchByKeyword(String keyword){
		return itemRepository.searchByKeyword(keyword);
	}
	
	//REQ 17.2 y REQ 18.1
	//List the warehouses and navigate to the items that they store.
	public Collection<Item> itemsInWarehouse(int warehouseId){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN) || DPUtils.currentUserHasRole(Authority.CLERK));
		return itemRepository.getItemsInWarehouse(warehouseId);
	}
	


}
