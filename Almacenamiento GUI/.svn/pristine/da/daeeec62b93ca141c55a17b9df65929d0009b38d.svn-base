package services;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.ItemRepository;
import security.Authority;
import utilities.DPMessage;
import utilities.DPUtils;
import domain.Category;
import domain.Item;

@Service
@Transactional
public class ItemService {
	// Managed Repository ------------------------------
	@Autowired
	private ItemRepository itemRepository;
	

	// Supporting Services -----------------------------
	

	// Constructors ------------------------------------
	public ItemService() {
		super();
	}

	// Simple CRUD Methods -----------------------------
	public Item create() {
		return new Item();
	}
	
	public void updateSoldItems(Item item, int newSoldQuantity){
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER));
		item.setNumSold(item.getNumSold() + newSoldQuantity);
		itemRepository.save(item);
	}
	
	public Collection<Item> findAll(){
		return itemRepository.findAllItems();
	}
	
	// REQ 12.2 - Manage the catalogue of items, which includes creating, updating, and deleting them. 
	// Note that items are never actually deleted, but marked as deleted. 
	// Items that are marked as deleted are not displayed in the catalogue of items and, obviously, cannot be ordered.
	public Item save(Item item){
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return itemRepository.save(item);
	}
		
	public void delete(Item item){
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		item.setDeleted(true);
		itemRepository.save(item);
	}
	
	// Other Business Methods ---------------------------
	// REQ 10.2 - List the catalogue of items grouped by their categories.
	public Map<Category, Item> getItemsGroupedByCategory() {
		Map<Category,Item> res = new HashMap<>();
		Collection<Item> items = itemRepository.findAll();
		
		for(Item item : items) {
			if(!item.getDeleted()){
				res.put(item.getCategory(), item);
			}
		}
		
		return res;
	}
	
	// REQ 10.3 - Search for an item using a single keyword that must appear verbatim in its SKU, its name, or its description.
	public Collection<Item> searchByKeyword(String keyword){
		return itemRepository.searchByKeyword(keyword);
	}
	
	// REQ 12.7.3 - The best-selling item/s in the inventory.
	public Collection<Item> findBestSellingItems() {
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return itemRepository.bestSellerItems();
	}
	
	// REQ 12.7.4 - The worst-selling item/s in the inventory.
	public Collection<Item> findWorstSellingItems() {
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return itemRepository.worstSellerItems();
	}
}
