package services;

import java.util.Collection;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.OrderRepository;
import security.Authority;
import security.LoginService;
import utilities.DPMessage;
import utilities.DPUtils;
import domain.Clerk;
import domain.Order;
import domain.OrderedItem;

@Service
@Transactional
public class OrderService {
	// Managed Repository ------------------------------
	@Autowired
	private OrderRepository orderRepository;
	

	// Supporting Services -----------------------------
	@Autowired
	private ClerkService clerkService;
	
	@Autowired
	private ConsumerService consumerService;
	

	// Constructors ------------------------------------
	public OrderService() {
		super();
	}

	// Simple CRUD Methods -----------------------------
	public Order create() {
		return new Order();
	}
	
	public Order save(Order order){
		Assert.isTrue(DPUtils.hasRole(Authority.CLERK, Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		Assert.isTrue(order.getConsumer().getUserAccount().getId() == LoginService.getPrincipal().getId(), DPMessage.NO_PERMISSIONS);
		consumerService.updateSpentMoney(order);
		return orderRepository.save(order);
	}
	
	// REQ 12.6 - List the orders that have been placed in the system.
	public Collection<Order> findAll(){
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return orderRepository.findAll();
	}

	// Other Business Methods ---------------------------
	// REQ 16.1 - A user who is authenticated as a customer must be able to cancel an order as long as no clerk has self-assigned it.
	public Order cancelOrder(Order order) {
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		Assert.isTrue(order.getConsumer().getUserAccount().getId() == LoginService.getPrincipal().getId(), DPMessage.NO_PERMISSIONS);
		Assert.isTrue(order.getClerk() == null, DPMessage.ORDER_TAKEN);
		
		order.setCancellationMoment(new Date());
		
		return save(order);
	}
	
	// REQ 17.6.5 - The ratio of orders that have been cancelled during the current month.
	public double getCancelledOrderRatioCurrentMonth() {
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return orderRepository.cancelledOrdersCurrentMonthRatio();
	}
	
	// REQ 18.3 - Self-assign an order to serve it. (Obviously, the system must guarantee that every order is finally served by a unique clerk)
	public Order selfAssignOrder(Order order) {
		Assert.isTrue(DPUtils.hasRole(Authority.CLERK), DPMessage.NO_PERMISSIONS);
		Assert.isTrue(order.getClerk() == null, DPMessage.ORDER_TAKEN);
		
		Clerk me = clerkService.findClerkByUserAccountId(LoginService.getPrincipal().getId());
		order.setClerk(me);
		return save(order);
	}
	
	// REQ 18.5 - Mark an order as delivered when all of the items have been served
	public Order markAsDelivered(Order order) {
		Assert.isTrue(DPUtils.hasRole(Authority.CLERK), DPMessage.NO_PERMISSIONS);
		
		for(OrderedItem orderedItem : order.getOrderedItems()){
			Assert.isTrue(orderedItem.getServed());
		}
		
		order.setDeliveryMoment(new Date());
		return save(order);
	}

}
