/* AdministratorController.java
 *
 * Copyright (C) 2013 Universidad de Sevilla
 * 
 * The use of this project is hereby constrained to the conditions of the 
 * TDG Licence, a copy of which you may download from 
 * http://www.tdg-seville.info/License.html
 * 
 */

package controllers;

import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.CategoryService;
import controllers.AbstractController;
import domain.Category;

@Controller
@RequestMapping("/administrator")
public class AdministratorController extends AbstractController {

	// Services ---------------------------------------------------------------

		@Autowired
		private CategoryService categoryService;	
		
		// Constructors -----------------------------------------------------------
		
		public AdministratorController() {
			super();
		}

		// Listing ----------------------------------------------------------------
		
		@RequestMapping(value = "/categoryList", method = RequestMethod.GET)
		public ModelAndView list() {
			ModelAndView result;
			Collection<Category> categories;
			
			categories = categoryService.findAll();
			result = new ModelAndView("administrator/categoryList");
			result.addObject("categories", categories);				
			
			return result;
		}
		
		// Creation ---------------------------------------------------------------

		@RequestMapping(value = "/categoryCreate", method = RequestMethod.GET)
		public ModelAndView create() {
			ModelAndView result;
			Category Category;

			Category = categoryService.create();
			result = createEditModelAndView(Category);

			return result;
		}

		// Edition ----------------------------------------------------------------
		
		@RequestMapping(value = "/categoryEdit", method = RequestMethod.GET)
		public ModelAndView edit(@RequestParam int categoryId) {
			ModelAndView result;
			Category Category;

			Category = categoryService.findOne(categoryId);		
			Assert.notNull(Category);
			result = createEditModelAndView(Category);

			return result;
		}

		@RequestMapping(value = "/categoryEdit", method = RequestMethod.POST, params = "save")
		public ModelAndView save(@Valid Category Category, BindingResult binding) {
			ModelAndView result;		

			if (binding.hasErrors()) {
				result = createEditModelAndView(Category);
			} else {
				try {				
					categoryService.save(Category);
					result = new ModelAndView("redirect:categoryList.do");
				} catch (Throwable oops) {				
					result = createEditModelAndView(Category, "category.commit.error");				
				}
			}

			return result;
		}
				
		@RequestMapping(value = "/categoryEdit", method = RequestMethod.POST, params = "delete")
		public ModelAndView delete(Category Category, BindingResult binding) {
			ModelAndView result;

			try {			
				categoryService.delete(Category);			
				result = new ModelAndView("redirect:categoryList.do");						
			} catch (Throwable oops) {	
				result = createEditModelAndView(Category, "category.commit.error");
			}

			return result;
		}

		// Ancillary methods ------------------------------------------------------
		
		protected ModelAndView createEditModelAndView(Category Category) {
			ModelAndView result;

			result = createEditModelAndView(Category, null);
			
			return result;
		}	
		
		protected ModelAndView createEditModelAndView(Category Category, String message) {
			ModelAndView result;
					
			result = new ModelAndView("administrator/categoryEdit");
			result.addObject("Category", Category);
			result.addObject("message", message);
			
			return result;
		}
		
}