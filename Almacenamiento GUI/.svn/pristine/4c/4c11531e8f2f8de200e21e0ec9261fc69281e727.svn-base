package services;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.ShoppingCartRepository;
import security.Authority;
import security.LoginService;
import utilities.DPMessage;
import utilities.DPUtils;
import domain.Consumer;
import domain.CreditCard;
import domain.Item;
import domain.ItemQuantityCart;
import domain.Order;
import domain.OrderedItem;
import domain.ShoppingCart;

@Service
@Transactional
public class ShoppingCartService {
	// Managed Repository ------------------------------
	@Autowired
	private ShoppingCartRepository cartRepository;
	

	// Supporting Services -----------------------------
	@Autowired
	private ItemQuantityCartService itemCartService;
	
	@Autowired
	private OrderService orderService;
	
	@Autowired
	private ConsumerService consumerService;
	
	@Autowired
	private OrderedItemService orderedItemService;
	
	@Autowired
	private ItemService itemService;
	

	// Constructors ------------------------------------
	public ShoppingCartService() {
		super();
	}

	// Simple CRUD Methods -----------------------------
	public ShoppingCart create() {
		return new ShoppingCart();
	}

	// REQ 11.2 - Displaying his or her shopping cart
	public ShoppingCart getShoppingCart(){
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		ShoppingCart cart = cartRepository.getShoppingCartByClientId(LoginService.getPrincipal().getId());
		
		if(cart == null){
			Consumer current;
			ShoppingCart firstCart = create();
			save(firstCart);
			current = consumerService.getByUserAccountId(LoginService.getPrincipal().getId());
			current.setShoppingCart(firstCart);
			consumerService.save(current);
		}
		
		cart = cartRepository.getShoppingCartByClientId(LoginService.getPrincipal().getId());
		
		Assert.notNull(cart.getItemQuantityCart());
		Assert.notNull(cart.getComments());
		cart.getItemQuantityCart().size();
		cart.getComments().size();
		
		return cart;
	}

	public ShoppingCart save(ShoppingCart cart) {
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		return cartRepository.save(cart);
	}

	// Other Business Methods ---------------------------
	
	// REQ 11.3 - Add an item to his or her shopping cart. 
	// If an item is added to a shopping cart that already contains that item, the quantity must be updated accordingly.
	public void addItem(Item item){
		ItemQuantityCart itemCart = getShoppingCartItem(item);
		
		if(itemCart == null){
			ItemQuantityCart newItem = itemCartService.create();
			newItem.setItem(item);
			newItem.setItemQuantity(1);
			newItem.setShoppingCart(getShoppingCart());
			itemCartService.save(newItem);
		} else {
			itemCart.setItemQuantity(itemCart.getItemQuantity() + 1);
			itemCartService.save(itemCart);
		}
	}
	
	// REQ 11.4 - Change the quantity of an item in his or her shopping cart
	public void changeItemQuantity(Item item, int quantity){
		ItemQuantityCart itemCart = getShoppingCartItem(item);
		Assert.isTrue(itemCart != null, DPMessage.NO_ITEM);
		
		itemCart.setItemQuantity(quantity);
		itemCartService.save(itemCart);
	}
	
	// REQ 11.5 -Delete an item from his or her shopping cart.
	public void deleteItem(Item item){
		ItemQuantityCart itemCart = getShoppingCartItem(item);
		Assert.isTrue(itemCart != null, DPMessage.NO_ITEM);
		
		getShoppingCart().getItemQuantityCart().remove(itemCart);
		itemCartService.delete(itemCart);
		save(getShoppingCart());
	}
	
	// REQ 11.6 - Add, modify, or delete a comment to his or her shopping cart.
	public void addCommentToCart(String comment){
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		ShoppingCart cart = getShoppingCart();

		cart.getComments().add(comment);
		cartRepository.save(cart);
	}
	
	public void modifyComment(String oldComment, String newComment){
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		ShoppingCart cart = getShoppingCart();

		cart.getComments().remove(oldComment);
		cart.getComments().add(newComment);
		
		cartRepository.save(cart);
	}
	
	public void deleteComment(String comment){
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		getShoppingCart().getComments().remove(comment);
		cartRepository.save(getShoppingCart());
	}
	
	// REQ 11.7 - Check his or her shopping cart out and place the corresponding order.
	public Order checkOut(CreditCard card, String address){
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		Order order = orderService.create();
		Consumer consumer = consumerService.getByUserAccountId(LoginService.getPrincipal().getId());

		order.setCreditCard(card);
		order.setAddress(address);
		order.setConsumer(consumer);
		order.setComments(getShoppingCart().getComments());
		order.setConsumerName(consumer.getName());
		order.setPlacementMoment(new Date());
		order.setTicker("160102-1234"); // TODO ¿Dónde generamos el Ticker? Porque ahora mismo... JE

		for(ItemQuantityCart item : getShoppingCart().getItemQuantityCart()){
			OrderedItem orderedItem= orderedItemService.create();
			orderedItem.setCategoryName(item.getItem().getCategory().getName());
			orderedItem.setDescription(item.getItem().getDescription());
			orderedItem.setName(item.getItem().getName());
			orderedItem.setOrder(order);
			orderedItem.setPicture(item.getItem().getPicture());
			orderedItem.setPrice(item.getItem().getPrice());
			orderedItem.setQuantity(item.getItemQuantity());
			orderedItem.setSku(item.getItem().getSku());
			orderedItem.setTaxAmount(item.getItem().getTax().getAmount());
			orderedItem.setTaxName(item.getItem().getTax().getName());
			orderedItem.setServed(false);
			order.getOrderedItems().add(orderedItem);
			
			itemService.updateSoldItems(item.getItem(), item.getItemQuantity());
			
		}
		
		return orderService.save(order);
	}
	
	// Auxiliar Methods ----------------------------------
	private ItemQuantityCart getShoppingCartItem(Item item){
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		ShoppingCart curCart = getShoppingCart();
		return itemCartService.getItemInCart(item.getId(), curCart.getId());
	}
}
