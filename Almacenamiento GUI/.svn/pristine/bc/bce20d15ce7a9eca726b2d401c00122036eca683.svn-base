package domain;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Embeddable;
import javax.validation.constraints.Digits;
import javax.validation.constraints.Min;

import org.hibernate.validator.constraints.NotBlank;

@Embeddable
@Access(AccessType.PROPERTY)
public class Money {
	
	public Money(){}

	public Money(double amount, String currency) {
		super();
		this.amount = amount;
		this.currency = currency;
	}
	
	// ------------ Attributes ------------ 
	
	private double amount;
	private String currency;
	
	// ------------ Attributes getters and setters ------------ 
	
	@Digits(integer = 9, fraction = 2)
	@Min(0)
	public double getAmount() {
		return amount;
	}

	public void setAmount(double amount) {
		this.amount = amount;
	}

	@NotBlank
	public String getCurrency() {
		return currency;
	}

	public void setCurrency(String currency) {
		this.currency = currency;
	}
	
	// ------------ Operations ------------ 

	public Money add(Money money) {
		if (this.currency.compareTo(money.getCurrency()) == 0)
			this.amount += money.getAmount();
		else
			throw new IllegalArgumentException("Currency to add (" + money.getCurrency() + " is not equal to the current currency (" + this.currency + ").");

		return this;
	}

	public Money subtract(Money money) {
		if (this.currency.compareTo(money.getCurrency()) == 0)
			this.amount -= money.getAmount();
		else
			throw new IllegalArgumentException("Currency to substract (" + money.getCurrency() + " is not equal to the current currency (" + this.currency + ").");

		return this;
	}

}
