package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import utils.AbstractTest;
import domain.Clerk;
import domain.Consumer;
import domain.CreditCard;
import domain.Money;
import domain.Order;
import domain.OrderedItem;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations= { "classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"})

public class OrderedItemBasicTest extends AbstractTest{
	
	// Service under Test -----------------
	@Autowired
	private OrderedItemService orderedItemService;
	
	// Helper functions -------------------
	@SuppressWarnings("deprecation")
	private OrderedItem generateTestOrderedItem()
	{
		Date date = new Date();
		date.setDate(20);
		
		Money money2 = new Money();
		money2.setAmount(150.2);
		money2.setCurrency("creditosDeLaRepublica2");
		
		CreditCard creditCard = new CreditCard();
		creditCard.setBrandName("creditCardname_test");
		creditCard.setCvvCode(555);
		creditCard.setExpirationMonth(11);
		creditCard.setExpirationYear(2016);
		creditCard.setHolderName("holderName_test");
		creditCard.setNumber("number_test");
		
		Clerk clerk = new Clerk();
		clerk.setName("testSave_clerkname");
		clerk.setSurname("testSave_clerksurname");
		clerk.setEmail("clerk@acmesupermarket.com");
		
		Consumer consumer = new Consumer();
		consumer.setSpentMoney(money2);
		consumer.setCancelledOrders(100);
		consumer.setTotalOrders(2500);
		consumer.setName("test_consumer_name");
		consumer.setSurname("test_consumer_surname");
		consumer.setPhone("555-175-125");
		consumer.setEmail("test@acmesupermarket.com");
		
		Collection<String> comments2 = new ArrayList<String>();
		comments2.add("coment_test2");
		
		Collection<OrderedItem> orderedItems2 = new ArrayList<OrderedItem>();
		orderedItems2.add(new OrderedItem());
		
		Order order2 = new Order();
		order2.setAddress("address_test2");
		order2.setCancellationMoment(date);
		order2.setClerk(clerk);
		order2.setComments(comments2);
		order2.setConsumer(consumer);
		order2.setConsumerName("consumername_test2");
		order2.setCreditCard(creditCard);
		order2.setDeliveryMoment(date);
		order2.setOrderedItems(orderedItems2);
		order2.setPlacementMoment(date);
		order2.setTicker("ticker_test2");
		
		Money money = new Money();
		money.setAmount(150.5);
		money.setCurrency("creditosDeLaRepublica");
		
		
		OrderedItem orderedItem2 = new OrderedItem();
		orderedItem2.setCategoryName("category_test2");
		orderedItem2.setDescription("description_test2");
		orderedItem2.setName("Ordereditem_test2");
		orderedItem2.setOrder(order2);
		orderedItem2.setPicture("picture_test2");
		orderedItem2.setPrice(money);
		orderedItem2.setQuantity(100);
		orderedItem2.setServed(true);
		orderedItem2.setSku("sku_test2");
		orderedItem2.setTaxAmount(21);
		
		Collection<OrderedItem> orderedItems = new ArrayList<OrderedItem>();
		orderedItems.add(new OrderedItem());
				
		Collection<String> comments = new ArrayList<String>();
		comments.add("comment_test");
		
		Order order = new Order();
		order.setAddress("address_test");
		order.setCancellationMoment(date);
		order.setClerk(clerk);
		order.setComments(comments);
		order.setConsumer(consumer);
		order.setConsumerName("consumername_test");
		order.setCreditCard(creditCard);
		order.setDeliveryMoment(date);
		order.setOrderedItems(orderedItems);
		order.setPlacementMoment(date);
		order.setTicker("ticker_test");
		
		OrderedItem orderedItem = new OrderedItem();
		orderedItem.setCategoryName("category_test");
		orderedItem.setDescription("description_test");
		orderedItem.setName("Ordereditem_test");
		orderedItem.setOrder(order);
		orderedItem.setPicture("picture_test");
		orderedItem.setPrice(money);
		orderedItem.setQuantity(100);
		orderedItem.setServed(true);
		orderedItem.setSku("sku_test");
		orderedItem.setTaxAmount(21);
		
		
		
		return orderedItem;
	}

	@Test
	public void test_createOrderedItem(){
		authenticate("admin1");
		orderedItemService.save(generateTestOrderedItem());
		authenticate(null);
		
	}
}
