package services;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import security.UserAccount;
import utils.AbstractTest;
import domain.Consumer;
import domain.Money;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"})
public class ConsumerBasicTest extends AbstractTest {

	// Service under Test -----------------
	@Autowired
	private ConsumerService consumerService;

	// Helper functions -------------------
	private Consumer generateTestConsumer() {
		Money money = new Money();
		UserAccount userAccount = new UserAccount();
		Consumer consumer = consumerService.create();
		
		money.setAmount(150.5);
		money.setCurrency("Euro");
		
		userAccount.setUsername("consumerTest");
		userAccount.setPassword("consumerTest");
		
		consumer.setSpentMoney(money);
		consumer.setUserAccount(userAccount);
		consumer.setCancelledOrders(100);
		consumer.setTotalOrders(2500);
		consumer.setName("test_consumer_name");
		consumer.setSurname("test_consumer_surname");
		consumer.setPhone("555-175-125");
		consumer.setEmail("test@acmesupermarket.com");

		return consumer;
	}

	// Tests ------------------------------
	// TEST 10.1; 11.1; 12.1 Register to the system as a consumer.
	@Test
	public void saveConsumerAsAnonymous() {
		authenticate(null);
		Consumer test = consumerService.save(generateTestConsumer());
		Assert.isTrue(test.getId() != 0);
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void saveConsumerAsNonAnonymous(){
		authenticate("admin1");
		consumerService.save(generateTestConsumer());
		authenticate(null);
	}
	
	// TEST 12.5 - List the consumers that are registered in the system.
	@Test
	public void listUsers(){
		authenticate("admin1");
		Assert.notEmpty(consumerService.findAll());
		authenticate(null);
	}
	
	// TEST 12.7 (1) - The consumer/s who has/have placed more orders.
	@Test
	public void getTopFidelityConsumer(){
		authenticate("admin1");
		Assert.notEmpty(consumerService.findTopOrdersConsumers());
		authenticate(null);
	}
	
	// TEST 12.7 (2) - The consumer/s who has/have spent more money on their orders.
	@Test
	public void getRichestConsumers(){
		authenticate("admin1");
		Assert.notEmpty(consumerService.findTopSpentMoneyConsumers());
		authenticate(null);
	}
}