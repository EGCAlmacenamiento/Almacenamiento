package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.WarehouseRepository;
import security.Authority;
import utilities.DPMessage;
import utilities.DPUtils;
import domain.Warehouse;

@Service
@Transactional
public class WarehouseService {
	// Managed Repository ------------------------------
	@Autowired
	private WarehouseRepository warehouseRepository;
	
	// Supporting Services -----------------------------
	
	// Constructors ------------------------------------
	public WarehouseService(){
		super();
	}
	
	
	// Simple CRUD Methods -----------------------------
	
	
	public Warehouse create(){
		return new Warehouse();
	}
	
	//REQ 17.3 Register a new warehouse to the system.
	//REQ 17.4 Modify, update, or delete a warehouse.
	public Warehouse save(Warehouse warehouse){
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return warehouseRepository.save(warehouse);
	}
	
	public void delete(Warehouse warehouse){
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		warehouseRepository.delete(warehouse);
	}
	
	//REQ 17.2 List the warehouses and navigate to the items that they store.
	//REQ 18.1 List the warehouses and navigate to the items that they store.
	public Collection<Warehouse> findAll(){
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN, Authority.CLERK), DPMessage.NO_PERMISSIONS);
		return warehouseRepository.findAll();
	}
	
	// Other Business Methods ---------------------------
	// REQ 18.2 - Search for the warehouses that have at least one unit available of a given item. 
	public Collection<Warehouse> getWarehousesAtLeastOneUnitAvaibable(int itemId){
		Assert.isTrue(DPUtils.hasRole(Authority.CLERK), DPMessage.NO_PERMISSIONS);
		return warehouseRepository.getWarehousesWithStock(itemId);
	}
	
}
