package services;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.ClerkRepository;
import security.Authority;
import utilities.DPUtils;
import domain.Clerk;

@Service
@Transactional
public class ClerkService{
	// Managed Repository ------------------------------
	@Autowired
	private ClerkRepository clerkRepository;

	// Supporting Services -----------------------------

	// Constructors ------------------------------------
	public ClerkService() {
		super();
	}

	// Simple CRUD Methods -----------------------------
	
	public Clerk findClerkById(Integer id) {
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN) || DPUtils.currentUserHasRole(Authority.CLERK), "You don't have privileges to perform this action.");
		return clerkRepository.findOne(id);
	}

	public Clerk create() {
		return new Clerk();
	}

	public void save(Clerk clerk) {
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN), "You don't have privileges to perform this action.");
		clerkRepository.save(clerk);
	}
	
	//REQ 17.1
	//Register a new clerk to the system
	public void registerNewClerk(Clerk clerk) {
		// No podemos crear el Clerk aquí, básicamente porque Clerk extiende de Actor
		// que lleva ciertos atributos como nombre etc...
		// Si lo creamos aquí, nos tendríamos que inventar los datos, por lo que el Clerk debe venir dado
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN), "You don't have privileges to perform this action.");
		Authority clerkAuthority = new Authority();
		clerkAuthority.setAuthority(Authority.CLERK);
		clerk.getUserAccount().addAuthority(clerkAuthority);
		save(clerk);
	}

	// Other Business Methods ---------------------------
	
	//REQ 17.6.1
	//The clerk/s who has/have served and delivered more orders
	public Collection<Clerk> findClerkMoreServedOrders() {
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN), "You don't have privileges to perform this action.");
		return clerkRepository.clerkMaxOrders();
	}
	
	//REQ 17.6.2
	//The clerk/s who has/have served and delivered les orders
	public Collection<Clerk> findClerkLessServedOrders() {
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN), "You don't have privileges to perform this action.");
		return clerkRepository.clerkMinOrders();
	}
}
