package services;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.TransactionSystemException;

import security.Authority;
import security.UserAccount;
import utils.AbstractTest;
import domain.Clerk;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations= { "classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"})

public class ClerkBasicTest extends AbstractTest{
	
	// Service under Test -----------------
	@Autowired
	private ClerkService clerkService;
	
	// Helper functions -------------------
	private Clerk generateTestClerk()
	{
		Clerk clerk = new Clerk();
		UserAccount useraccount = new UserAccount();
		Authority authority = new Authority();
		
		clerk.setName("testSave_clerkname");
		clerk.setSurname("testSave_clerksurname");
		clerk.setEmail("clerk@acmesupermarket.com");
		
		authority.setAuthority(Authority.CLERK);
		useraccount.addAuthority(authority);
		clerk.setUserAccount(useraccount);
		return clerk;
	}
	
	// Tests ------------------------------
	@Test
	public void testSave(){
		authenticate("admin1");
		clerkService.save(generateTestClerk());
		authenticate(null);
	}

	@Test(expected = IllegalArgumentException.class)
	public void testSave2(){
		// no authentication
		clerkService.save(generateTestClerk());
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testSave3(){
		// wrong authentication
		authenticate("consumer1");
		clerkService.save(generateTestClerk());
		authenticate(null);
	}
	
	@Test(expected = TransactionSystemException.class)
	public void testSave4(){
		Clerk clerk = generateTestClerk();
		
		// let's produce ConstraintViolationException
		clerk.setUserAccount(null);

		authenticate("admin1");
		clerkService.save(clerk);
		authenticate(null);
	}

	// this testDelete() is not required by our requirements
	@Test
	public void testDelete(){
		authenticate("admin1");
		clerkService.save(generateTestClerk());
		authenticate(null);
	}

	@Test
	public void testfindClerkMoreServedOrders()
	{
		authenticate("admin1");
		clerkService.findClerkMoreServedOrders();
		authenticate(null);
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testfindClerkMoreServedOrders2()
	{
		// no authentication
		clerkService.findClerkMoreServedOrders();
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testfindClerkMoreServedOrders3()
	{
		// wrong authentication
		authenticate("clerk1");
		clerkService.findClerkMoreServedOrders();
		authenticate(null);
	}
	
	@Test
	public void testfindClerkLessServedOrders()
	{
		authenticate("admin1");
		clerkService.findClerkLessServedOrders();
		authenticate(null);
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testfindClerkLessServedOrders2()
	{
		// no authentication
		clerkService.findClerkLessServedOrders();
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testfindClerkLessServedOrders3()
	{
		// wrong authentication
		authenticate("consumer1");
		clerkService.findClerkLessServedOrders();
		authenticate(null);
	}
}
