package services;

import java.util.Collection;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.OrderRepository;
import security.Authority;
import security.LoginService;
import utilities.DPUtils;
import domain.Clerk;
import domain.Order;
import domain.OrderedItem;

@Service
@Transactional
public class OrderService {
	// Managed Repository ------------------------------
	@Autowired
	private OrderRepository orderRepository;

	// Supporting Services -----------------------------
	@Autowired
	private ClerkService clerkService;

	// Constructors ------------------------------------
	public OrderService() {
		super();
	}

	// Simple CRUD Methods -----------------------------
	public Order create() {
		return new Order();
	}
	
	public Order save(Order order){
		//Una order solo debe ser modificada por un Clerk o por el usuario al que pertenece
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CLERK) ||
			(DPUtils.currentUserHasRole(Authority.CONSUMER) &&
					order.getConsumer().getId() == LoginService.getPrincipal().getId()), "You don't have privileges to perform this action.");
		return orderRepository.save(order);
	}
	
	//REQ 12.6
	//List the orders that have been placed in the system.
	public Collection<Order> findAll(){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN), "You don't have privileges to perform this action.");
		return orderRepository.findAll();
	}

	// Other Business Methods ---------------------------
	
	//REQ 16.1
	//A user who is authenticated as a customer must be able to cancel an order
	//as long as no clerk has self-assigned it.
	public Order cancelOrder(Order order) {
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CONSUMER) &&
						order.getConsumer().getId() == LoginService.getPrincipal().getId(), "You don't have privileges to perform this action.");
		//La order no debe estar asociada a ningún clerk
		Assert.isTrue(order.getClerk() == null);
		order.setCancellationMoment(new Date());
		return save(order);
	}
	
	//REQ 17.6.5
	//The ratio of orders that have been cancelled during the current month.
	public double getCancelledOrderRatioCurrentMonth() {
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN), "You don't have privileges to perform this action.");
		return orderRepository.cancelledOrdersCurrentMonthRatio();
	}
	
	//REQ 18.3
	//Self-assign an order to serve it. (Obviously, the system must guarantee that every order is finally served by a unique clerk)
	public Order selfAssignOrder(Order order) {
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CLERK), "You don't have privileges to perform this action.");
		Assert.isTrue(order.getClerk() == null);
		Clerk me = clerkService.findClerkById(LoginService.getPrincipal().getId());
		order.setClerk(me);
		return save(order);
	}
	
	//REQ 18.5
	//Mark an order as delivered when all of the items have been served
	public Order markAsDelivered(Order order) {
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CLERK), "You don't have privileges to perform this action.");
		
		for(OrderedItem orderedItem : order.getOrderedItems()){
			Assert.isTrue(orderedItem.getServed());
		}
		
		order.setDeliveryMoment(new Date());
		return save(order);
	}

}
