package services;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.ShoppingCartRepository;
import security.Authority;
import security.LoginService;
import utilities.DPUtils;
import domain.Consumer;
import domain.Item;
import domain.ItemQuantityCart;
import domain.Order;
import domain.OrderedItem;
import domain.ShoppingCart;

@Service
@Transactional
public class ShoppingCartService {
	// Managed Repository ------------------------------
	@Autowired
	private ShoppingCartRepository cartRepository;

	// Supporting Services -----------------------------
	@Autowired
	private ItemQuantityCartService itemCartService;
	
	@Autowired
	private OrderService orderService;
	
	@Autowired
	private ConsumerService consumerService;
	
	@Autowired
	private OrderedItemService orderedItemService;

	// Constructors ------------------------------------
	public ShoppingCartService() {
		super();
	}

	// Simple CRUD Methods -----------------------------
	public ShoppingCart create() {
		return new ShoppingCart();
	}

	// REQ 11.2
	// Displaying his or her shopping cart
	public ShoppingCart getShoppingCart(){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CONSUMER), "You need to be a consumer in order to use a cart.");
		return cartRepository.getShoppingCartByClientId(LoginService.getPrincipal().getId());
	}

	public void save(ShoppingCart cart) {
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CONSUMER), "You need to be a consumer in order to use a cart.");
		cartRepository.save(cart);
	}

	// Other Business Methods ---------------------------
	
	// REQ 11.3
	// Add an item to his or her shopping cart. 
	// If an item is added to a shopping cart that already contains that item, the quantity must be updated accordingly.
	public void addItem(Item item){
		// Obtenemos el item del carrito del usuario actual
		ItemQuantityCart itemCart = getShoppingCartItem(item);
		
		if(itemCart == null){
			ItemQuantityCart newItem = itemCartService.create();
			newItem.setItem(item);
			newItem.setItemQuantity(1);
			newItem.setShoppingCart(getShoppingCart());
			itemCartService.save(newItem);
		} else {
			itemCart.setItemQuantity(itemCart.getItemQuantity() + 1);
			itemCartService.save(itemCart);
		}

		// Actualizamos el carrito
		// ¿Necesario? Se cambia el ItemCart, no el Shopping Cart
		// TODO Debatir
		cartRepository.save(getShoppingCart());
	}
	
	// REQ 11.4
	// Change the quantity of an item in his or her shopping cart
	public void changeItemQuantity(Item item, int quantity){
		// Obtenemos el item del carrito del usuario actual
		ItemQuantityCart itemCart = getShoppingCartItem(item);
		
		// Si no existe el item en el carrito, no continuamos.
		Assert.isTrue(itemCart != null);
		
		// Una vez llegados aquí, es decir, existe el item en el carrito, actualizamos.
		itemCart.setItemQuantity(itemCart.getItemQuantity() + quantity);
		
		// Actualizamos el registro
		itemCartService.save(itemCart);
	}
	
	// REQ 11.5
	// Delete an item from his or her shopping cart.
	public void deleteItem(Item item){
		// Obtenemos el item del carrito del usuario actual
		ItemQuantityCart itemCart = getShoppingCartItem(item);
		
		// Si no existe el item en el carrito, no continuamos.
		Assert.isTrue(itemCart != null);
		
		// LCS01 
		// davsanboi - 20151111
		// Se elimina el item del carrito.
		getShoppingCart().getItemQuantityCart().remove(itemCart);
		
		// Guardamos el carrito
		save(getShoppingCart());
		//LCF01

		// Realizamos el borrado del Item
		itemCartService.delete(itemCart);
	}
	
	// REQ 11.6
	// Add, modify, or delete a comment to his or her shopping cart.
	public void addCommentToCart(String comment){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CONSUMER), "You need to be a consumer in order to use a cart.");
		getShoppingCart().getComments().add(comment);
		cartRepository.save(getShoppingCart());
	}
	
	public void modifyComment(String oldComment, String newComment){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CONSUMER), "You need to be a consumer in order to use a cart.");
		getShoppingCart().getComments().remove(oldComment);
		getShoppingCart().getComments().add(newComment);
		cartRepository.save(getShoppingCart());
	}
	
	public void deleteComment(String comment){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CONSUMER), "You need to be a consumer in order to use a cart.");
		getShoppingCart().getComments().remove(comment);
		cartRepository.save(getShoppingCart());
	}
	
	// REQ 11.7
	// Check his or her shopping cart out and place the corresponding order.
	public Order checkOut(){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CONSUMER), "You need to be a consumer in order to place an order.");
		
		// Creamos el pedido
		Order order = orderService.create();
		
		// Obtenemos el usuario
		Consumer consumer = consumerService.getConsumerById(LoginService.getPrincipal().getId());
		
		// Establecemos los datos básicos del pedido
		order.setConsumer(consumer);
		order.setComments(getShoppingCart().getComments());
		order.setConsumerName(consumer.getName());
		order.setPlacementMoment(new Date());

		// Obtenemos los OrderedItems y los introducimos en Order
		List<OrderedItem> orderedItems = new ArrayList<OrderedItem>(); 

		for(ItemQuantityCart item : getShoppingCart().getItemQuantityCart()){
			// Instanciación
			OrderedItem orderedItem= orderedItemService.create();
		
			// Propiedades
			orderedItem.setCategoryName(item.getItem().getCategory().getName());
			orderedItem.setDescription(item.getItem().getDescription());
			orderedItem.setName(item.getItem().getName());
			orderedItem.setOrder(order);
			orderedItem.setPicture(item.getItem().getPicture());
			orderedItem.setPrice(item.getItem().getPrice());
			orderedItem.setQuantity(item.getItemQuantity());
			orderedItem.setSku(item.getItem().getSku());
			orderedItem.setTaxAmount(item.getItem().getTax().getAmount());
			orderedItem.setTaxName(item.getItem().getTax().getName());
			
			// Adición
			orderedItems.add(orderedItem);
		}
		
		order.setOrderedItems(orderedItems);
		
		// Atributos que se hacen en el momento del pedido, no en la preparación:
		//order.setCreditCard(consumer.get)
		//order.setOrderedItems(orderedItems)
		//order.setPlacementMoment(new Date());
		//order.setTicker(ticker)
		
		// Perpetuamos en BD
		orderService.save(order);
		
		return order;
	}

	
	
	// Auxiliar Methods ----------------------------------
	
	private ItemQuantityCart getShoppingCartItem(Item item){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CONSUMER), "You need to be a consumer in order to use a cart.");
		
		// Obtenemos el carrito del usuario
		ShoppingCart curCart = getShoppingCart();
		
		//Obtenemos el item en el carrito
		return itemCartService.getItemInCart(item.getId(), curCart.getId());
	}
}
