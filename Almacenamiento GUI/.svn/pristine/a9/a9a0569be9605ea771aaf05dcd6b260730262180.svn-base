package services;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.TransactionSystemException;

import utils.AbstractTest;
import domain.Category;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations= { "classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"})

public class CategoryBasicTest extends AbstractTest{
	
	// Service under Test -----------------
	@Autowired
	private CategoryService categoryService;
	
	// Helper functions -------------------
	private Category generateTestCategory()
	{
		Category category = new Category();

		category.setName("testSave_categoryname");
		category.setDescription("testSave_categorydescription");
		return category;
	}
	
	// Tests ------------------------------
	@Test
	public void testSave(){
		authenticate("admin1");
		categoryService.save(generateTestCategory());
		authenticate(null);
	}

	@Test(expected = IllegalArgumentException.class)
	public void testSave2(){
		// no authentication
		authenticate(null);
		categoryService.save(generateTestCategory());
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testSave3(){
		// wrong authentication
		authenticate("consumer1");
		categoryService.save(generateTestCategory());
		authenticate(null);
	}
	
	@Test(expected = TransactionSystemException.class)
	public void testSave4(){
		Category category = generateTestCategory();

		// let's produce ConstraintViolationException
		category.setName(null);

		authenticate("admin1");
		categoryService.save(category);
		authenticate(null);
	}

	@Test
	public void testDelete(){
		authenticate("admin1");
		categoryService.save(generateTestCategory());
		authenticate(null);
	}
}