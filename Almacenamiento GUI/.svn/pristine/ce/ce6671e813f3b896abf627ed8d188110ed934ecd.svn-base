package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.WarehouseRepository;
import security.Authority;
import utilities.DPUtils;
import domain.Warehouse;

@Service
@Transactional
public class WarehouseService {
	// Managed Repository ------------------------------
	@Autowired
	private WarehouseRepository warehouseRepository;
	
	// Supporting Services -----------------------------
	
	// Constructors ------------------------------------
	public WarehouseService(){
		super();
	}
	
	
	// Simple CRUD Methods -----------------------------
	
	//REQ 17.3
	//REQ 17.4
	//Register, modify, update and delete warehouses
	public Warehouse create(){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN), "You don't have privileges to perform this action.");
		return new Warehouse();
	}
	
	public void delete(Warehouse warehouse){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN), "You don't have privileges to perform this action.");
		warehouseRepository.delete(warehouse);
	}
	
	public void save(Warehouse warehouse){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN), "You don't have privileges to perform this action.");
		warehouseRepository.save(warehouse);
	}
	
	//REQ 17.2
	//REQ 18.1
	public Collection<Warehouse> findAll(){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.ADMIN) || DPUtils.currentUserHasRole(Authority.CLERK), "You don't have privileges to perform this action.");
		return warehouseRepository.findAll();
	}
	
	// Other Business Methods ---------------------------
	
	
	
	//REQ 18.2
	//Search for the warehouses that have at least one unit available of a given item. 
	public Collection<Warehouse> getWarehousesAtLeastOneUnitAvaibable(int itemId){
		Assert.isTrue(DPUtils.currentUserHasRole(Authority.CLERK), "You don't have privileges to perform this action.");
		return warehouseRepository.getWarehousesWithStock(itemId);
	}
	
}
