package services;


import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.ConsumerRepository;
import security.Authority;
import security.LoginService;
import utilities.DPMessage;
import utilities.DPUtils;
import domain.Consumer;
import domain.Money;
import domain.Order;
import domain.OrderedItem;

@Service
@Transactional
public class ConsumerService {
	// Managed Repository ------------------------------
	@Autowired
	private ConsumerRepository consumerRepository;
	

	// Supporting Services -----------------------------
	

	// Constructors ------------------------------------
	public ConsumerService() {
		super();
	}

	// Simple CRUD Methods -----------------------------
	public Consumer create() {
		return new Consumer();
	}
	
	public Consumer getConsumerById(int consumerId){
		return consumerRepository.findOne(consumerId);
	}
	
	public Consumer getByUserAccountId(int userAccountId){
		return consumerRepository.getByUserAccountId(userAccountId);
	}
	
	public void updateSpentMoney(Order order){
		Assert.isTrue(DPUtils.hasRole(Authority.CONSUMER), DPMessage.NO_PERMISSIONS);
		Assert.isTrue(order.getConsumer().getUserAccount().getId() == LoginService.getPrincipal().getId(), DPMessage.NO_PERMISSIONS);
		
		// Actualizamos el dinero gastado en total
		Consumer consumer = getByUserAccountId(LoginService.getPrincipal().getId());
		Money money = consumer.getSpentMoney();
		
		for(OrderedItem item : order.getOrderedItems()){
			money.setAmount(money.getAmount() + (item.getPrice().getAmount() * item.getQuantity()));
		}
		consumer.setTotalOrders(consumer.getTotalOrders() + 1);
		consumer.setSpentMoney(money);
		consumerRepository.save(consumer);
	}

	// REQ 10.1 - Register to the system as a consumer
	// REQ 11.1 - Do the same as a user who is not authenticated, except for registering to the system.
	// REQ 12.1 - Do the same as a user who is not authenticated, except for registering to the system.
	public Consumer save(Consumer consumer) {
		Assert.isTrue(!DPUtils.hasRole(Authority.ADMIN, Authority.CONSUMER, Authority.CLERK), DPMessage.ALREADY_REGISTERED);

		Authority authConsumer = new Authority();
		authConsumer.setAuthority(Authority.CONSUMER);
		
		if(!consumer.getUserAccount().getAuthorities().contains(authConsumer)){
			consumer.getUserAccount().addAuthority(authConsumer);			
		}
		
		return consumerRepository.save(consumer);
	}
	
	// REQ 12.5 - List the consumers that are registered in the system.
	public Collection<Consumer> findAll(){
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return consumerRepository.findAll();
	}
	
	// Other Business Methods ---------------------------
	// REQ 12.7.1 - The consumer/s who has/have placed more orders.
	public Collection<Consumer> findTopOrdersConsumers() {
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return consumerRepository.consumerMaxOrders();
	}
	
	// REQ 12.7.2 - The consumer/s who has/have spent more money on their orders.
	public Collection<Consumer> findTopSpentMoneyConsumers() {
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return consumerRepository.consumerMaxSpentmoney();
	}
	
	// REQ 17.6.3 - The consumer/s who has/have cancelled more orders.
	public Collection<Consumer> findMoreCancelledOrdersConsumers() {
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return consumerRepository.consumerMaxCancelledOrders();
	}
	
	// REQ 17.6.4 - The consumer/s who has/have cancelled less orders.
	public Collection<Consumer> findLessCancelledOrdersConsumers() {
		Assert.isTrue(DPUtils.hasRole(Authority.ADMIN), DPMessage.NO_PERMISSIONS);
		return consumerRepository.consumerMinCancelledOrders();
	}
	
}